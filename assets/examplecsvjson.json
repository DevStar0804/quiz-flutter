{
  "1": {
    "question": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.",
    "answer a": "The framework forces the root widget to cover",
    "answer b": "The framework forces the root widget to cover the screen, which means the text “Hello, world”",
    "answer c": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction",
    "answer d": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the",
    "correct": "a",
    "explanation": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.",
    "area": "1"
  },
  "2": {
    "question": "what is 1 + 1",
    "answer a": "1",
    "answer b": "2",
    "answer c": "3",
    "answer d": "4",
    "correct": "b",
    "explanation": " As of Flutter’s 1.19.0 dev release, the Flutter SDK contains the dart command alongside the flutter command so that you can more easily run Dart command-line programs. Downloading the Flutter SDK also downloads the compatible version of Dart, but if you’ve downloaded the Dart SDK separately, make sure that the Flutter version of dart is first in your path, as the two versions might not be compatible. ",
    "area": "2"
  },
  "3": {
    "question": "what is 1 + 2",
    "answer a": "1",
    "answer b": "2",
    "answer c": "3",
    "answer d": "4",
    "correct": "c",
    "explanation": "As shown above, the two commands don’t come from the same bin directory. Update your path to use commands from /path-to-flutter-sdk/bin before commands from /usr/local/bin.",
    "area": "3"
  },
  "4": {
    "question": "what is 1 + 3",
    "answer a": "1",
    "answer b": "2",
    "answer c": "3",
    "answer d": "4",
    "correct": "d",
    "explanation": "This command checks your environment and displays a report of the status of your Flutter installation. Check the output carefully for other software you might need to install or further tasks to perform.",
    "area": "4"
  },
  "5": {
    "question": "what is 1 + 4",
    "answer a": "5",
    "answer b": "2",
    "answer c": "3",
    "answer d": "4",
    "correct": "a",
    "explanation": "This document is meant for Android developers looking to apply their existing Android knowledge to build mobile apps with Flutter. If you understand the fundamentals of the Android framework then you can use this document as a jump start to Flutter development.",
    "area": "1"
  },
  "6": {
    "question": "what is 1 + 5",
    "answer a": "1",
    "answer b": "6",
    "answer c": "3",
    "answer d": "4",
    "correct": "b",
    "explanation": "Your Android knowledge and skill set are highly valuable when building with Flutter, because Flutter relies on the mobile operating system for numerous capabilities and configurations.",
    "area": "2"
  },
  "7": {
    "question": "what is 1 + 6",
    "answer a": "1",
    "answer b": "2",
    "answer c": "7",
    "answer d": "4",
    "correct": "c",
    "explanation": "Flutter is a new way to build UIs for mobile, but it has a plugin system to communicate with Android (and iOS) for non-UI tasks. If you’re an expert with Android, you don’t have to relearn everything to use Flutter.",
    "area": "3"
  },
  "8": {
    "question": "what is 1 + 7",
    "answer a": "1",
    "answer b": "2",
    "answer c": "3",
    "answer d": "8",
    "correct": "d",
    "explanation": "However, these have a few differences to a View. To start, widgets have a different lifespan: they are immutable and only exist until they need to be changed. Whenever widgets or their state change, Flutter’s framework creates a new tree of widget instances.",
    "area": "4"
  },
  "9": {
    "question": "what is 1 + 8",
    "answer a": "9",
    "answer b": "2",
    "answer c": "3",
    "answer d": "4",
    "correct": "a",
    "explanation": "Flutter includes the Material Components library. These are widgets that implement the Material Design guidelines. Material Design is a flexible design system optimized for all platforms, including iOS.",
    "area": "5"
  },
  "10": {
    "question": "what is 1 + 9",
    "answer a": "1",
    "answer b": "10",
    "answer c": "3",
    "answer d": "4",
    "correct": "b",
    "explanation": "But Flutter is flexible and expressive enough to implement any design language. For example, on iOS, you can use the Cupertino widgets to produce an interface that looks like Apple’s iOS design language.",
    "area": "2"
  },
  "11": {
    "question": "what is 1 + 10",
    "answer a": "1",
    "answer b": "2",
    "answer c": "11",
    "answer d": "4",
    "correct": "c",
    "explanation": "In Android, you update your views by directly mutating them. However, in Flutter, Widgets are immutable and are not updated directly, instead you have to work with the widget’s state.",
    "area": "3"
  },
  "12": {
    "question": "what is 1 + 11",
    "answer a": "1",
    "answer b": "2",
    "answer c": "3",
    "answer d": "12",
    "correct": "d",
    "explanation": "As you can see, the Text Widget has no state information associated with it, it renders what is passed in its constructors and nothing more.",
    "area": "4"
  },
  "13": {
    "question": "what is 1 + 12",
    "answer a": "13",
    "answer b": "2",
    "answer c": "3",
    "answer d": "4",
    "correct": "a",
    "explanation": "If you are in doubt, then always remember this rule: if a widget changes (because of user interactions, for example) it’s stateful. However, if a widget reacts to change, the containing parent widget can still be stateless if it doesn’t itself react to change.",
    "area": "1"
  },
  "14": {
    "question": "what is 1 + 13",
    "answer a": "1",
    "answer b": "14",
    "answer c": "3",
    "answer d": "4",
    "correct": "b",
    "explanation": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.",
    "area": "2"
  },
  "15": {
    "question": "what is 1 + 14",
    "answer a": "1",
    "answer b": "2",
    "answer c": "15",
    "answer d": "4",
    "correct": "c",
    "explanation": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.",
    "area": "3"
  },
  "16": {
    "question": "what is 1 + 15",
    "answer a": "1",
    "answer b": "2",
    "answer c": "3",
    "answer d": "16",
    "correct": "d",
    "explanation": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.",
    "area": "4"
  },
  "17": {
    "question": "what is 1 + 16",
    "answer a": "1",
    "answer b": "2",
    "answer c": "17",
    "answer d": "4",
    "correct": "c",
    "explanation": "In Android, you update your views by directly mutating them. However, in Flutter, Widgets are immutable and are not updated directly, instead you have to work with the widget’s state.",
    "area": "5"
  },
  "18": {
    "question": "what is 1 + 17",
    "answer a": "1",
    "answer b": "2",
    "answer c": "3",
    "answer d": "18",
    "correct": "d",
    "explanation": "As you can see, the Text Widget has no state information associated with it, it renders what is passed in its constructors and nothing more.",
    "area": "5"
  },
  "19": {
    "question": "what is 1 + 18",
    "answer a": "19",
    "answer b": "2",
    "answer c": "3",
    "answer d": "4",
    "correct": "a",
    "explanation": "If you are in doubt, then always remember this rule: if a widget changes (because of user interactions, for example) it’s stateful. However, if a widget reacts to change, the containing parent widget can still be stateless if it doesn’t itself react to change.",
    "area": "5"
  },
  "20": {
    "question": "what is 1 + 19",
    "answer a": "1",
    "answer b": "20",
    "answer c": "3",
    "answer d": "4",
    "correct": "b",
    "explanation": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.",
    "area": "2"
  },
  "21": {
    "question": "what is 1 + 20",
    "answer a": "1",
    "answer b": "2",
    "answer c": "21",
    "answer d": "4",
    "correct": "c",
    "explanation": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.",
    "area": "3"
  },
  "22": {
    "question": "what is 1 + 21",
    "answer a": "1",
    "answer b": "2",
    "answer c": "3",
    "answer d": "22",
    "correct": "d",
    "explanation": "The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.",
    "area": "5"
  }
}